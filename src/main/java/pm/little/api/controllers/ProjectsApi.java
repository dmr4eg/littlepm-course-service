/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import pm.little.api.models.ProjectBlueprint;
import pm.little.api.models.ProjectDaysMapper;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


import java.util.List;
import java.util.Map;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-26T00:36:51.210059+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "projects", description = "the projects API")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /projects : List project blueprints
     * List project blueprints (paginated)
     *
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of project blueprints (status code 200)
     */
    @Operation(
        operationId = "projectsGet",
        summary = "List project blueprints",
        description = "List project blueprints (paginated)",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of project blueprints", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectBlueprint.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectBlueprint>> projectsGet(
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects : Create new project blueprint
     * Create new project blueprint (admin only)
     *
     * @param projectBlueprint  (required)
     * @return The created project blueprint (status code 200)
     */
    @Operation(
        operationId = "projectsPost",
        summary = "Create new project blueprint",
        description = "Create new project blueprint (admin only)",
        responses = {
            @ApiResponse(responseCode = "200", description = "The created project blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectBlueprint.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectBlueprint> projectsPost(
        @Parameter(name = "ProjectBlueprint", description = "", required = true) @Valid @RequestBody ProjectBlueprint projectBlueprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{project_blueprint_uuid}/days : Unlink a day from a project blueprint
     * Unlink day from project (admin only)
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidDaysDelete",
        summary = "Unlink a day from a project blueprint",
        description = "Unlink day from project (admin only)",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{project_blueprint_uuid}/days"
    )
    
    default ResponseEntity<Void> projectsProjectBlueprintUuidDaysDelete(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{project_blueprint_uuid}/days : Get days linked to a project blueprint
     * Get linked days (paginated)
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of ProjectDaysMapper (status code 200)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidDaysGet",
        summary = "Get days linked to a project blueprint",
        description = "Get linked days (paginated)",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of ProjectDaysMapper", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectDaysMapper.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{project_blueprint_uuid}/days",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectDaysMapper>> projectsProjectBlueprintUuidDaysGet(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"project_blueprint\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"day\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 }, { \"project_blueprint\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"day\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects/{project_blueprint_uuid}/days : Link a day to a project blueprint
     * Link day to project (admin only)
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @param order Order or position (general integer query usage) (required)
     * @return Linked day (status code 200)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidDaysPost",
        summary = "Link a day to a project blueprint",
        description = "Link day to project (admin only)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Linked day", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDaysMapper.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{project_blueprint_uuid}/days",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectDaysMapper> projectsProjectBlueprintUuidDaysPost(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid,
        @NotNull @Parameter(name = "order", description = "Order or position (general integer query usage)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = true) Integer order
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"project_blueprint\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"day\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{project_blueprint_uuid} : Delete a project blueprint
     * Delete project blueprint (admin only)
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidDelete",
        summary = "Delete a project blueprint",
        description = "Delete project blueprint (admin only)",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{project_blueprint_uuid}"
    )
    
    default ResponseEntity<Void> projectsProjectBlueprintUuidDelete(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{project_blueprint_uuid} : Get project blueprint details
     * Returns a specific project blueprint
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @return Project blueprint (status code 200)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidGet",
        summary = "Get project blueprint details",
        description = "Returns a specific project blueprint",
        responses = {
            @ApiResponse(responseCode = "200", description = "Project blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectBlueprint.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{project_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectBlueprint> projectsProjectBlueprintUuidGet(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /projects/{project_blueprint_uuid} : Update an existing project blueprint
     * Update project blueprint (admin only)
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param projectBlueprint  (required)
     * @return Updated project blueprint (status code 200)
     */
    @Operation(
        operationId = "projectsProjectBlueprintUuidPut",
        summary = "Update an existing project blueprint",
        description = "Update project blueprint (admin only)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated project blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectBlueprint.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{project_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectBlueprint> projectsProjectBlueprintUuidPut(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "ProjectBlueprint", description = "", required = true) @Valid @RequestBody ProjectBlueprint projectBlueprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
