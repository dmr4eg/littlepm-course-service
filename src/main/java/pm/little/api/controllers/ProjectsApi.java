/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import pm.little.api.models.Error;
import pm.little.api.models.Project;
import pm.little.api.models.ProjectBlueprint;
import pm.little.api.models.ProjectUpdate;
import pm.little.api.models.ProjectsPostRequest;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Validated
@Tag(name = "Projects", description = "Project lifecycle management")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /projects/{projectUUID} : Get project details
     * Retrieve detailed information about a specific project
     *
     * @param projectUUID Unique project identifier (required)
     * @return Project details retrieved (status code 200)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "getProject",
        summary = "Get project details",
        description = "Retrieve detailed information about a specific project",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project details retrieved", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{projectUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Project> getProject(
        @Parameter(name = "projectUUID", description = "Unique project identifier", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"ownerUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"name\" : \"Q4 Marketing Campaign\", \"description\" : \"Year-end marketing push\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/blueprints : List available blueprints
     * Retrieve paginated list of blueprints for projects with user access
     *
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @return Successful project list retrieval (status code 200)
     *         or Missing or invalid authentication (status code 401)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "listBlueprintsProject",
        summary = "List available blueprints",
        description = "Retrieve paginated list of blueprints for projects with user access",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful project list retrieval", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectBlueprint.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Missing or invalid authentication", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/blueprints",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectBlueprint>> listBlueprintsProject(
        @Min(1) @Max(100) @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Pagination offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprintUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"Q4 marketing strategy\", \"title\" : \"Marketing Blueprint\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"blueprintUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"Q4 marketing strategy\", \"title\" : \"Marketing Blueprint\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects : List accessible projects
     * Retrieve paginated list of projects with user access
     *
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param status Filter tasks by status (optional)
     * @return Successful project list retrieval (status code 200)
     *         or Missing or invalid authentication (status code 401)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "listProjects",
        summary = "List accessible projects",
        description = "Retrieve paginated list of projects with user access",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful project list retrieval", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Project.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Missing or invalid authentication", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Project>> listProjects(
        @Min(1) @Max(100) @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Pagination offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "status", description = "Filter tasks by status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"ownerUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"name\" : \"Q4 Marketing Campaign\", \"description\" : \"Year-end marketing push\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"ownerUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"name\" : \"Q4 Marketing Campaign\", \"description\" : \"Year-end marketing push\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /projects : Create project from blueprint
     * Create project from blueprint
     *
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param status Blueprints by its type (optional)
     * @param projectsPostRequest  (optional)
     * @return Project was created from a blueprint (status code 202)
     *         or Invalid request parameters (status code 400)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "projectsPost",
        summary = "Create project from blueprint",
        description = "Create project from blueprint",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Project was created from a blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Project> projectsPost(
        @Min(1) @Max(100) @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "20") Integer limit,
        @Min(0) @Parameter(name = "offset", description = "Pagination offset", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "status", description = "Blueprints by its type", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) String status,
        @Parameter(name = "ProjectsPostRequest", description = "") @Valid @RequestBody(required = false) ProjectsPostRequest projectsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"ownerUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"name\" : \"Q4 Marketing Campaign\", \"description\" : \"Year-end marketing push\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /projects/{projectUUID} : Update project
     * Update project metadata and details
     *
     * @param projectUUID Unique project identifier (required)
     * @param projectUpdate  (required)
     * @return Project updated successfully (status code 200)
     *         or Invalid request parameters (status code 400)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "updateProject",
        summary = "Update project",
        description = "Update project metadata and details",
        tags = { "Projects" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Project.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{projectUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Project> updateProject(
        @Parameter(name = "projectUUID", description = "Unique project identifier", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "ProjectUpdate", description = "", required = true) @Valid @RequestBody ProjectUpdate projectUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"ownerUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"name\" : \"Q4 Marketing Campaign\", \"description\" : \"Year-end marketing push\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
