/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import pm.little.api.models.dto.DayDTO;
import pm.little.api.models.DayInstance;
import pm.little.api.models.Finances;
import pm.little.api.models.Members;
import pm.little.api.models.dto.ProjectDTO;
import pm.little.api.models.ProjectInstance;

import java.util.UUID;
import pm.little.api.models.UserUserUuidProjectPostRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;


import java.util.List;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-26T00:36:51.210059+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/{user_uuid}/day/{day_blueprint_uuid} : Get a user&#39;s day status
     *
     * @param userUuid The UUID of the user (required)
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @return DayDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidDayDayBlueprintUuidGet",
        summary = "Get a user's day status",
        responses = {
            @ApiResponse(responseCode = "200", description = "DayDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DayDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/day/{day_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DayDTO> userUserUuidDayDayBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"text\" : \"text\", \"title\" : \"title\" }, \"instance\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"in_progress\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/day/{day_blueprint_uuid} : Update a user&#39;s day status
     *
     * @param userUuid The UUID of the user (required)
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @param dayInstance  (required)
     * @return Updated DayDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidDayDayBlueprintUuidPut",
        summary = "Update a user's day status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated DayDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DayDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/day/{day_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DayDTO> userUserUuidDayDayBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid,
        @Parameter(name = "DayInstance", description = "", required = true) @Valid @RequestBody DayInstance dayInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"text\" : \"text\", \"title\" : \"title\" }, \"instance\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"in_progress\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/day/ : List user&#39;s day progress
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of DayDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidDayGet",
        summary = "List user's day progress",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of DayDTO", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DayDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/day/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DayDTO>> userUserUuidDayGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"text\" : \"text\", \"title\" : \"title\" }, \"instance\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"in_progress\" } }, { \"blueprint\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"text\" : \"text\", \"title\" : \"title\" }, \"instance\" : { \"day_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : \"in_progress\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/form/{form_blueprint_uuid} : Get a user&#39;s form submission
     *
     * @param userUuid The UUID of the user (required)
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @return FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormFormBlueprintUuidGet",
        summary = "Get a user's form submission",
        responses = {
            @ApiResponse(responseCode = "200", description = "FormDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/form/{form_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FormDTO> userUserUuidFormFormBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/form/{form_blueprint_uuid} : Update a user&#39;s form submission
     *
     * @param userUuid The UUID of the user (required)
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param formInstance  (required)
     * @return Updated FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormFormBlueprintUuidPut",
        summary = "Update a user's form submission",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated FormDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/form/{form_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FormDTO> userUserUuidFormFormBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "FormInstance", description = "", required = true) @Valid @RequestBody FormInstance formInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/form/ : List user&#39;s form submissions
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormGet",
        summary = "List user's form submissions",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of FormDTO", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/form/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FormDTO>> userUserUuidFormGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }, { \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/project : List user&#39;s projects
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of the user&#39;s project DTOs (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectGet",
        summary = "List user's projects",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of the user's project DTOs", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/project",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectDTO>> userUserUuidProjectGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, \"instance\" : { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"feedback\" : \"feedback\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"what_went_well\" : \"what_went_well\", \"status\" : \"in_progress\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } }, { \"blueprint\" : { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, \"instance\" : { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"feedback\" : \"feedback\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"what_went_well\" : \"what_went_well\", \"status\" : \"in_progress\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{user_uuid}/project : Create new project instance
     *
     * @param userUuid The UUID of the user (required)
     * @param userUserUuidProjectPostRequest  (required)
     * @return Created ProjectDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectPost",
        summary = "Create new project instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created ProjectDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{user_uuid}/project",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectDTO> userUserUuidProjectPost(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "UserUserUuidProjectPostRequest", description = "", required = true) @Valid @RequestBody UserUserUuidProjectPostRequest userUserUuidProjectPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, \"instance\" : { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"feedback\" : \"feedback\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"what_went_well\" : \"what_went_well\", \"status\" : \"in_progress\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/project/{project_blueprint_uuid}/calculate : Calculate financial data
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param finances  (required)
     * @return Calculated project finance (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidCalculatePut",
        summary = "Calculate financial data",
        responses = {
            @ApiResponse(responseCode = "200", description = "Calculated project finance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Finances.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/calculate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Finances> userUserUuidProjectProjectBlueprintUuidCalculatePut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "Finances", description = "", required = true) @Valid @RequestBody Finances finances
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toys_planned\" : 5.962134, \"calculated_budget\" : 2.027123, \"items_cost\" : 4.145608, \"sold_price\" : 1.0246457, \"recommended_price\" : 7.386282, \"investor_return\" : 6.0274563, \"members_budged\" : 7.0614014, \"toys_left\" : 2.302136, \"price_per_item\" : 1.2315135, \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"investor_gave\" : 0.8008282, \"expense_amount\" : 3.6160767, \"spent_budget\" : 1.4658129, \"toys_sold\" : 5.637377, \"profit\" : 9.301444 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/project/{project_blueprint_uuid}/finances : Get financial data
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @return Project finance (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidFinancesGet",
        summary = "Get financial data",
        responses = {
            @ApiResponse(responseCode = "200", description = "Project finance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Finances.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/finances",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Finances> userUserUuidProjectProjectBlueprintUuidFinancesGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toys_planned\" : 5.962134, \"calculated_budget\" : 2.027123, \"items_cost\" : 4.145608, \"sold_price\" : 1.0246457, \"recommended_price\" : 7.386282, \"investor_return\" : 6.0274563, \"members_budged\" : 7.0614014, \"toys_left\" : 2.302136, \"price_per_item\" : 1.2315135, \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"investor_gave\" : 0.8008282, \"expense_amount\" : 3.6160767, \"spent_budget\" : 1.4658129, \"toys_sold\" : 5.637377, \"profit\" : 9.301444 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{user_uuid}/project/{project_blueprint_uuid}/finances : Create financial data
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param userUserUuidProjectPostRequest  (required)
     * @return Created project finance (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidFinancesPost",
        summary = "Create financial data",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created project finance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Finances.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/finances",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Finances> userUserUuidProjectProjectBlueprintUuidFinancesPost(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "UserUserUuidProjectPostRequest", description = "", required = true) @Valid @RequestBody UserUserUuidProjectPostRequest userUserUuidProjectPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toys_planned\" : 5.962134, \"calculated_budget\" : 2.027123, \"items_cost\" : 4.145608, \"sold_price\" : 1.0246457, \"recommended_price\" : 7.386282, \"investor_return\" : 6.0274563, \"members_budged\" : 7.0614014, \"toys_left\" : 2.302136, \"price_per_item\" : 1.2315135, \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"investor_gave\" : 0.8008282, \"expense_amount\" : 3.6160767, \"spent_budget\" : 1.4658129, \"toys_sold\" : 5.637377, \"profit\" : 9.301444 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/project/{project_blueprint_uuid}/finances : Update financial data
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param finances  (required)
     * @return Updated project finance (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidFinancesPut",
        summary = "Update financial data",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated project finance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Finances.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/finances",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Finances> userUserUuidProjectProjectBlueprintUuidFinancesPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "Finances", description = "", required = true) @Valid @RequestBody Finances finances
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"toys_planned\" : 5.962134, \"calculated_budget\" : 2.027123, \"items_cost\" : 4.145608, \"sold_price\" : 1.0246457, \"recommended_price\" : 7.386282, \"investor_return\" : 6.0274563, \"members_budged\" : 7.0614014, \"toys_left\" : 2.302136, \"price_per_item\" : 1.2315135, \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"investor_gave\" : 0.8008282, \"expense_amount\" : 3.6160767, \"spent_budget\" : 1.4658129, \"toys_sold\" : 5.637377, \"profit\" : 9.301444 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/project/{project_blueprint_uuid} : Get a user-specific project instance
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @return A single ProjectDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidGet",
        summary = "Get a user-specific project instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "A single ProjectDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectDTO> userUserUuidProjectProjectBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, \"instance\" : { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"feedback\" : \"feedback\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"what_went_well\" : \"what_went_well\", \"status\" : \"in_progress\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/project/{project_blueprint_uuid}/members : List project members
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of Members (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidMembersGet",
        summary = "List project members",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of Members", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Members.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Members>> userUserUuidProjectProjectBlueprintUuidMembersGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"member_name\" : \"member_name\" }, { \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"member_name\" : \"member_name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/{user_uuid}/project/{project_blueprint_uuid}/members : Add a member
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param members  (required)
     * @return Created project member record (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidMembersPost",
        summary = "Add a member",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created project member record", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Members.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Members> userUserUuidProjectProjectBlueprintUuidMembersPost(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "Members", description = "", required = true) @Valid @RequestBody Members members
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"member_name\" : \"member_name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/project/{project_blueprint_uuid} : Update project instance
     *
     * @param userUuid The UUID of the user (required)
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param projectInstance  (required)
     * @return Updated ProjectDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidProjectProjectBlueprintUuidPut",
        summary = "Update project instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated ProjectDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/project/{project_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectDTO> userUserUuidProjectProjectBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "ProjectInstance", description = "", required = true) @Valid @RequestBody ProjectInstance projectInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"difficulty\" : \"easy\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"welcome_video_url\" : \"welcome_video_url\", \"poster_url\" : \"poster_url\", \"description\" : \"description\", \"style\" : \"dyi\", \"title\" : \"title\" }, \"instance\" : { \"end_date\" : \"2000-01-23T04:56:07.000+00:00\", \"feedback\" : \"feedback\", \"project_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"what_went_well\" : \"what_went_well\", \"status\" : \"in_progress\", \"start_date\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/task/ : List user&#39;s task progress
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskGet",
        summary = "List user's task progress",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of TaskDTO", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/task/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TaskDTO>> userUserUuidTaskGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }, { \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/task/{task_blueprint_uuid} : Get user&#39;s task status
     *
     * @param userUuid The UUID of the user (required)
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @return TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskTaskBlueprintUuidGet",
        summary = "Get user's task status",
        responses = {
            @ApiResponse(responseCode = "200", description = "TaskDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/task/{task_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskDTO> userUserUuidTaskTaskBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/task/{task_blueprint_uuid} : Update user&#39;s task status
     *
     * @param userUuid The UUID of the user (required)
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @param taskInstance  (required)
     * @return Updated TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskTaskBlueprintUuidPut",
        summary = "Update user's task status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated TaskDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/task/{task_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskDTO> userUserUuidTaskTaskBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid,
        @Parameter(name = "TaskInstance", description = "", required = true) @Valid @RequestBody TaskInstance taskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
