/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import pm.little.api.models.DayComponentsMapper;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-27T23:47:32.256351+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "day-components-mapper", description = "the day-components-mapper API")
public interface DayComponentsMapperApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /day-components-mapper/{day_blueprint_uuid}/{component_uuid} : Delete day-component mapping (admin only)
     *
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @param componentUuid Component UUID in the path (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "dayComponentsMapperDayBlueprintUuidComponentUuidDelete",
        summary = "Delete day-component mapping (admin only)",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/day-components-mapper/{day_blueprint_uuid}/{component_uuid}"
    )
    
    default ResponseEntity<Void> dayComponentsMapperDayBlueprintUuidComponentUuidDelete(
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid,
        @Parameter(name = "component_uuid", description = "Component UUID in the path", required = true, in = ParameterIn.PATH) @PathVariable("component_uuid") UUID componentUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /day-components-mapper/{day_blueprint_uuid}/{component_uuid} : Get a specific day-component mapping
     *
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @param componentUuid Component UUID in the path (required)
     * @return DayComponentsMapper (status code 200)
     */
    @Operation(
        operationId = "dayComponentsMapperDayBlueprintUuidComponentUuidGet",
        summary = "Get a specific day-component mapping",
        responses = {
            @ApiResponse(responseCode = "200", description = "DayComponentsMapper", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DayComponentsMapper.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/day-components-mapper/{day_blueprint_uuid}/{component_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DayComponentsMapper> dayComponentsMapperDayBlueprintUuidComponentUuidGet(
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid,
        @Parameter(name = "component_uuid", description = "Component UUID in the path", required = true, in = ParameterIn.PATH) @PathVariable("component_uuid") UUID componentUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"day_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"component_uuid\" : \"a8494f64-0987-4dd0-8405-df19eb58f2ab\" }, \"type\" : \"TASK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /day-components-mapper/{day_blueprint_uuid}/{component_uuid} : Update a day-component mapping (admin only)
     *
     * @param dayBlueprintUuid The UUID of the day blueprint (required)
     * @param componentUuid Component UUID in the path (required)
     * @param dayComponentsMapper  (required)
     * @return Updated mapping (status code 200)
     */
    @Operation(
        operationId = "dayComponentsMapperDayBlueprintUuidComponentUuidPut",
        summary = "Update a day-component mapping (admin only)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated mapping", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DayComponentsMapper.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/day-components-mapper/{day_blueprint_uuid}/{component_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DayComponentsMapper> dayComponentsMapperDayBlueprintUuidComponentUuidPut(
        @Parameter(name = "day_blueprint_uuid", description = "The UUID of the day blueprint", required = true, in = ParameterIn.PATH) @PathVariable("day_blueprint_uuid") UUID dayBlueprintUuid,
        @Parameter(name = "component_uuid", description = "Component UUID in the path", required = true, in = ParameterIn.PATH) @PathVariable("component_uuid") UUID componentUuid,
        @Parameter(name = "DayComponentsMapper", description = "", required = true) @Valid @RequestBody DayComponentsMapper dayComponentsMapper
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"day_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"component_uuid\" : \"a8494f64-0987-4dd0-8405-df19eb58f2ab\" }, \"type\" : \"TASK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /day-components-mapper : List all day-component mappings
     *
     * @param limit Limit of the list (required)
     * @param offset Offset of the list (required)
     * @return A list of DayComponentsMapper (status code 200)
     */
    @Operation(
        operationId = "dayComponentsMapperGet",
        summary = "List all day-component mappings",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of DayComponentsMapper", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DayComponentsMapper.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/day-components-mapper",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<DayComponentsMapper>> dayComponentsMapperGet(
        @NotNull @Parameter(name = "limit", description = "Limit of the list", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = true) Integer limit,
        @NotNull @Parameter(name = "offset", description = "Offset of the list", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = true) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : { \"day_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"component_uuid\" : \"a8494f64-0987-4dd0-8405-df19eb58f2ab\" }, \"type\" : \"TASK\" }, { \"id\" : { \"day_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"component_uuid\" : \"a8494f64-0987-4dd0-8405-df19eb58f2ab\" }, \"type\" : \"TASK\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /day-components-mapper : Create a new day-component mapping (admin only)
     *
     * @param dayComponentsMapper  (required)
     * @return Created day-component mapping (status code 200)
     */
    @Operation(
        operationId = "dayComponentsMapperPost",
        summary = "Create a new day-component mapping (admin only)",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created day-component mapping", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DayComponentsMapper.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/day-components-mapper",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DayComponentsMapper> dayComponentsMapperPost(
        @Parameter(name = "DayComponentsMapper", description = "", required = true) @Valid @RequestBody DayComponentsMapper dayComponentsMapper
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"day_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"component_uuid\" : \"a8494f64-0987-4dd0-8405-df19eb58f2ab\" }, \"type\" : \"TASK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
