/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;
import pm.little.api.models.Members;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-04T00:03:08.519382+02:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "members", description = "the members API")
public interface MembersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /members : List all members records
     *
     * @param limit Limit of the list (required)
     * @param offset Offset of the list (required)
     * @return A list of Members (status code 200)
     */
    @Operation(
        operationId = "membersGet",
        summary = "List all members records",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of Members", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Members.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Members>> membersGet(
        @NotNull @Parameter(name = "limit", description = "Limit of the list", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = true) Integer limit,
        @NotNull @Parameter(name = "offset", description = "Offset of the list", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = true) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : { \"project_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"member_name\" : \"John Doe\" }, { \"id\" : { \"project_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"member_name\" : \"John Doe\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /members : Create new members record
     *
     * @param members  (required)
     * @return Created members record (status code 200)
     */
    @Operation(
        operationId = "membersPost",
        summary = "Create new members record",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created members record", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Members.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Members> membersPost(
        @Parameter(name = "Members", description = "", required = true) @Valid @RequestBody Members members
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"project_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"member_name\" : \"John Doe\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /members/{project_blueprint_uuid}/{user_uuid} : Delete a member record
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "membersProjectBlueprintUuidUserUuidDelete",
        summary = "Delete a member record",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/members/{project_blueprint_uuid}/{user_uuid}"
    )
    
    default ResponseEntity<Void> membersProjectBlueprintUuidUserUuidDelete(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /members/{project_blueprint_uuid}/{user_uuid} : Get one member record
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @return Members (status code 200)
     */
    @Operation(
        operationId = "membersProjectBlueprintUuidUserUuidGet",
        summary = "Get one member record",
        responses = {
            @ApiResponse(responseCode = "200", description = "Members", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Members.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/members/{project_blueprint_uuid}/{user_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Members> membersProjectBlueprintUuidUserUuidGet(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"project_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"member_name\" : \"John Doe\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /members/{project_blueprint_uuid}/{user_uuid} : Update a member record
     *
     * @param projectBlueprintUuid The UUID of the project blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @param members  (required)
     * @return Updated member (status code 200)
     */
    @Operation(
        operationId = "membersProjectBlueprintUuidUserUuidPut",
        summary = "Update a member record",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated member", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Members.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/members/{project_blueprint_uuid}/{user_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Members> membersProjectBlueprintUuidUserUuidPut(
        @Parameter(name = "project_blueprint_uuid", description = "The UUID of the project blueprint", required = true, in = ParameterIn.PATH) @PathVariable("project_blueprint_uuid") UUID projectBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "Members", description = "", required = true) @Valid @RequestBody Members members
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"project_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"member_name\" : \"John Doe\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
